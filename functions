function source_rc {
  file=$1
  rc=255
  if [ -e ${file}.local ]; then
    source ${file}.local
  elif [ -e $file ]; then
    source $file
    rc=0
  fi
  return $?
}

function test_overcloud {
  rc=255
  if [ -e /home/stack/cloud/overcloudrc ]; then
    source /home/stack/cloud/overcloudrc
    bash setup_image.sh
    rc=$?
    if [ $rc -eq 0 ]; then
      bash create_network.sh
      rc=$?
      if [ $rc -eq 0 ]; then
        bash boot_vm.sh
        rc=$?
        if [ $rc -eq 0 ]; then
          bash delete_network.sh
          rc=$?
        fi
      fi
    fi
  fi
  return $rc
}

function openstack_oc_update {
  openstack overcloud update stack $updateargs -i overcloud
  rc=$?
  return $rc
}

function openstack_oc_deploy {
  if [ -z $cephscale ] || [ -z $controlscale ] || [ -z $computescale ]; then
    rc=255
  elif [ \( $(expr $cephscale % 2) -eq 0 -a $cephscale -ne 0 \) ] || [ $(expr $controlscale % 2) -eq 0 -a $controlscale -eq 1 ]; then
    rc=254
  else
    if [ -z "$kvmhost" ]; then
      libvirttype=kvm
    else
      libvirttype=qemu
    fi
    startlog "Deploying overcloud"
    openstack overcloud deploy $deploymentargs --libvirt-type $libvirttype > /dev/null
    rc=$?
    if [ $rc -eq 0 ]; then
      endlog "done"
      for ip in $(nova list | grep ACTIVE | awk -F= '{ print $2 }' | awk '{ print $1 }'); do
        ssh-keygen -R $ip
      done
    else
      endlog "error"
    fi
  fi
  return $rc
}

function delete_overcloud {
  inc=0
  rc=0
  startlog "Deleting overcloud"
  heat=$( heat stack-list | grep overcloud )
  if [ ! -z "$heat" ]; then
    heat stack-delete overcloud > /dev/null
    while [ ! -z "$heat" ]; do
      heat=$( heat stack-list | grep overcloud )
      echo -n "."
      if [[ "$heat" =~ FAILED ]]; then
        inc=$( expr $inc + 1 )
        if [ $inc -le $maxfailedcount ]; then
          endlog "failed"
          startlog "Stack deletion failed! retrying"
          heat stack-delete overcloud > /dev/null
          sleep 1
        else
          endlog "failed"
          rc=255
          break
        fi
      fi
      sleep 1
    done
  fi
  if [ $rc -eq 0 ]; then
    endlog "done"
  else
    endlog "error"
  fi
  return $rc
}

function gen_macs {
    mac1=$(echo -n 52:54:00; dd bs=1 count=3 if=/dev/random 2>/dev/null |hexdump -v -e '/1 ":%02X"')
    mac2=$(echo -n 52:54:00; dd bs=1 count=3 if=/dev/random 2>/dev/null |hexdump -v -e '/1 ":%02X"')
}

function gen_xml {
    cp template.xml $tmpfile
    sed -i "s/###MAC1###/$mac1/" $tmpfile
    sed -i "s/###MAC2###/$mac2/" $tmpfile
    sed -i "s/###MEM###/$memory/" $tmpfile
    sed -i "s/###UUID###/$uuid/" $tmpfile
    sed -i "s/###VCPUS###/$vcpus/" $tmpfile
    sed -i "s/###TYPE-INC###/$type-$inc-$releasever/" $tmpfile
    sed -i "s/###DISK###/$type-$inc-$releasever/" $tmpfile
    sed -i "s|###PATH###|$tpath|" $tmpfile
}

function create_domain {
    sudo virsh define $tmpfile > /dev/null
}

function start_domain {
    sudo virsh start $vmname > /dev/null
}

function cleanup {
    rm -rf $tmpfile
}

function run_in_qemu {
  rc=255
  sudo dmidecode |grep -iq QEMU
  if [ $? -eq 0 ]; then
    rc=0
  fi
  return $rc
}

function validate_env {
  rc=255
  sudo dmidecode |grep -iq QEMU
  if [ $? -ne 0 ]; then
    rc=0;
  fi
  return $rc
}


function startlog {
  initial=$(date "+%s")
  echo -n "$1..."
}

function endlog {
  final=$(date "+%s")
  elapsed=$(( $final - $initial ))
  echo " $1. (${elapsed}s)"
}

